node {

  notify('Job has been Initated')

  try {
    stage('CheckOut Repo') {
      git 'https://github.com/prashuG/training.git'
    }

    def Project_Path = "atmosphere/spring-boot-samples/spring-boot-sample-atmosphere"

    dir (Project_Path) {
      stage('Clean my Repo') {
        sh label: '', script: 'mvn clean'
      }
      stage('Comiple my Code') {
        sh label: '', script: 'mvn compile'
      }
      stage('Build Atmosphere Package') {
        sh label: '', script: 'mvn package'
      }
      stage('Stage Deployment in Docker Env.') {
        sh label: '', script: 'docker-compose up -d --build'
      }
      stage('Getting Ready for Ansible Deployment') {
        sh label: '', script: 'cp -rf target/spring-boot-sample-atmosphere-1.4.0.BUILD-SNAPSHOT.jar ../../../ansible/demo07/playbooks/roles/webserver/templates/atmosphere.jar'
      }
      stage('Prod Deployment via Ansible') {
        sh label: '', script: 'ansible-playbook -i ../../../ansible/demo07/inventory ../../../ansible/demo07/site.yaml'
      }
      stage('Archive my Artifacts') {
        archiveArtifacts "${Project_Path}/target/*.jar"
      }
    }
    notify ('Job has been completed')
  } catch (err) {
      notify("Error ${err}")
      currentBuild.result = 'FAILURE'
    }
}

def notify(status) {
  emailext (
    to: "gopinath.prashu@gmail.com",
    subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
  )
}
